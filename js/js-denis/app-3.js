// –ó–∞–¥–∞—á–∞ 1

let balanse1;
let balanse2;

// console.log(balanse1 || 'no'); –û–ø–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ø–∞–¥–∞–µ—Ç –Ω–∞ –≤—Å–µ falsy - –∑–Ω–∞—á–µ–Ω–∏—è (–∏—Ö 6 —à—Ç—É–∫)
// console.log(balanse1 ?? balanse2); –ù–∞–ª–∏—à –æ–ø–µ—Ä–∞—Ç–æ—Ä ?? –ø–∞–¥–∞–µ—Ç –Ω–∞ null , underfinded


// * –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ genres —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´Jazz¬ª –∏ ¬´Blues¬ª.
// * –î–æ–±–∞–≤—å—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª–ª¬ª –≤ –∫–æ–Ω–µ—Ü.
// * –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞.
// * –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –º–∞—Å—Å–∏–≤–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã.
// * –£–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// * –í—Å—Ç–∞–≤—å—Ç–µ ¬´Country¬ª –∏ ¬´Reggy¬ª –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞.

// const genres = ["Jazz", "Blues"];
// genres.push("–†–æ–∫-–Ω-—Ä–æ–ª–ª");
// console.log(genres[0]);
// console.log(genres[genres.length - 1]);
// console.log(genres.shift()); - .shift - –≤—ã–¥–µ–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
// console.log(genres.unshift('¬´Country¬ª', '¬´Reggy¬ª')) - .unshift -–¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞ 
// console.log(genres);

 /**
  * TODO Example 2 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏
  * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏,
  * –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π values –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.
  * –ó–Ω–∞—á–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–º.
  */

//  const values = '8 11';
//  const valuesarray = values.split(" ");
//  console.log(valuesarray);
// console.log(Number(valuesarray[0]) * Number(valuesarray[1]));

// * TODO Example 3 - –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞
// * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –º–∞—Å—Å–∏–≤–∞ fruits —Ü–∏–∫–ª–æ–º for.
// * –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
// * —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–æ–º–µ—Ä_—ç–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–∏–µ_—ç–ª–µ–º–µ–Ω—Ç–∞.
// * –ù—É–º–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 1.
// */


// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];

// for (let i = 0; i < fruits.length; i += 1) {
// console.log(i + 1, fruits[i]);
// }

// /**
//   * TODO Example 4 - –ú–∞—Å—Å–∏–≤—ã –∏ —Ü–∏–∫–ª—ã
//   * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
//   * –í –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö names –∏ phones —Ö—Ä–∞–Ω—è—Ç—Å—è —Å—Ç—Ä–æ–∫–∏ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤,
//   * —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∞—Ö —É–∫–∞–∑—ã–≤–∞—é—Ç
//   * –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ

// const names = '–ú–∞–∫—Å–∏–º,–î–∏–º–∞,–ü–µ—Ç—è,–ö–æ–ª—è';
// const phones = '0982366595,0961515258,0672524548,0660550252';

// const namesArr = names.split(",");
// const phonesArr = phones.split(",");

// for (let i = 0; i < namesArr.length; i += 1){
//     console.log(namesArr[i], phonesArr[i] )
// }

 /**
  * TODO Example 5 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏
  * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —Å–ª–æ–≤–∞ —Å—Ç—Ä–æ–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ.
  * –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ–±–µ–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º.
  * –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ª—é–±–æ–π —Å—Ç—Ä–æ–∫–∏.
  */

//  const string = 'Welcom    to the future';
//  const stringArr = string.split(' ').slice(1, -1).join(' ').trim(); 

//  console.log(stringArr);

  /**
  * TODO Example 6 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏
  * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π ¬´—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç¬ª —Å—Ç—Ä–æ–∫—É (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤)
  * –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–µ –≤ –∫–æ–Ω—Å–æ–ª—å.
  */



//    const string = 'Welcom to the future!';

   //  –ú–æ–∂–Ω–æ —á–µ—Ä–µ–∑ for
//   for (let i = string.length-1; i >= 0; i -= 1){
 
//  console.log(string[i]);
// }

// –í–∞—Ä–∏–∞–Ω—Ç 2:
  
// const stringArr = string.split(' ').reverse().join(' '); 



/* Example 10 - –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–µ—Ç–≤–ª–µ–Ω–∏—è
* –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –ª–æ–≥–∏–Ω —Å –ø–æ–º–æ—â—å—é 
prompt –∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞.
*
* –ï—Å–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç "–ê–¥–º–∏–Ω", —Ç–æ prompt –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å
* –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ Esc - 
–≤—ã–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫—É "–û—Ç–º–µ–Ω–µ–Ω–æ"
* –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫—É "–Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é"
* –ü–∞—Ä–æ–ª—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–∞–∫:
*
* –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω –ø–∞—Ä–æ–ª—å "–Ø –∞–¥–º–∏–Ω", —Ç–æ 
–≤—ã–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫—É "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"
* –ò–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ç—Ä–æ–∫—É "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
*/

// const userName = prompt('Your name?');

// if (userName.trim === "–ê–¥–º–∏–Ω"){
//     const userPasword = prompt('Your password?');
//     if (userPasword == "–Ø –∞–¥–º–∏–Ω"){
//         console.log('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!') 
//     }else {
//         console.log("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å");
//     }
// } else if (Boolean(userName) === false){
//     console.log('–û—Ç–º–µ–Ω–∞');
// }else {
//     console.log ("–Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é")
// }


// –í–∞—Ä–∏–∞–Ω—Ç 2

// switch (userName.trim()) {
//     case '–ê–¥–º–∏–Ω':
//         const password = prompt('Your password?')   
//         if (password === '–Ø –∞–¥–º–∏–Ω') {
//             console.log("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!")
//         } else {
//             console.log("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
//         }
//         break;
//     case '':
//     case null:
//         console.log('–û—Ç–º–µ–Ω–µ–Ω–æ')
//         break;
//     default:
//         console.log("–Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é")
// }


// –ó–∞–¥–∞—á–∞
// –ù–∞–ø–∏—Å–∞—Ç—å —Ü–∏–∫–ª —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é

const numbers = [2, 5, 1, 7, 9, 3]

for (let i = 0, endI = numbers.length - 1; i < endI; i += 1){
    console.log('=================');
    console.log('i', i, 'endI', endI)
    console.log('=================');
    // #1 ====
    // i === 0
    // endI === 5
    // #2 ====
      // i === 1
    // endI === 5
     // #3 ====
      // i === 2
    // endI === 5
    let wasSwap = false;
    for (let j = 0, endJ = endI - i; j < endJ; j += 1) {

        // #1 ====
      // j === 0
      // endJ === 5
        // #2 ====
      // j === 1
      // endJ === 4
       // #3 ====
      // j === 2
      // endJ === 3
      console.log('j', j, 'endJ', endJ);
      if (numbers[j] > numbers[j + 1]) {
        // –ò–¥–µ—Ç 
        [numbers[j], numbers[j + 1]] = [numbers[j + 1], numbers[j]];
         wasSwap = true;
      }
}
if (wasSwap ===false) break;
console.log('=================');
}
console.log(numbers);


